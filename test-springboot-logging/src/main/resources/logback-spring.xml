<?xml version="1.0" encoding="UTF-8" ?> 
<!-- scan="true"    当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!--  scanPeriod="30 seconds"   设置每30秒自动扫描,若没有指定具体单位则以milliseconds为标准(单位:milliseconds, seconds, minutes or hours)  -->
<!-- debug="false"当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">

	<!--
	说明：
		1. 文件的命名和加载顺序有关
		   logback.xml早于application.yml加载，logback-spring.xml晚于application.yml加载
		   如果logback配置需要使用application.yml中的属性，需要命名为logback-spring.xml
		2. logback使用application.yml中的属性
		   使用springProperty才可使用application.yml中的值 可以设置默认值

	-->
	<!-- log base path -->
	<springProperty scope="context" name="Log_Home" source="logging.path" defaultValue="logs"/>
	<springProperty scope="context" name="Log_Level_Root" source="logging.level.root" defaultValue="info"/>

	<!-- 定义日志文件名称 -->
	<property name="appName" value="test-springboot-logging"></property>

	<!-- ch.qos.logback.core.ConsoleAppender 控制台输出 -->
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<springProfile name="dev">
				<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n</pattern>
			</springProfile>
			<springProfile name="!dev">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} - %msg%n</pattern>
			</springProfile>
		</encoder>
	</appender>

	<!-- DEBUG级别 -->
	<appender name="debug—log" class="ch.qos.logback.core.rolling.RollingFileAppender">

		<file>${Log_Home}/debug/debug.log</file>

		<!-- 级别过滤器 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 设置过滤级别 -->
			<level>DEBUG</level>
			<!-- 用于配置符合过滤条件的操作 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 用于配置不符合过滤条件的操作 -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--
		当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
		TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
		-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--
			滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
			%i：当文件大小超过maxFileSize时，按照i进行文件滚动
			-->
			<fileNamePattern>${Log_Home}/debug/debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!--
			可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
			且maxHistory是1，则只保存最近7天的文件，删除之前的旧文件。注意，删除旧文件是，
			那些为了归档而创建的目录也会被删除。
			logback的以时间滚动归档方式而言，按日打包还是按月打包，是根据<fileNamePattern>的内容决定的
			-->
			<maxHistory>7</maxHistory>
			<!--
				保持日志历史记录上限为1GB
				当超过总大小上限时，最早的档案将被异步删除。该totalSizeCap属性要求maxHistory属性设置为好
			-->
			<totalSizeCap>1GB</totalSizeCap>
			<!--
				当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动
				注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，
				必须配置timeBasedFileNamingAndTriggeringPolicy
			-->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>

		<!-- 日志输出格式： -->
		<encoder>
			<Pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} - %msg%n</Pattern>
		</encoder>
	</appender>


	<!-- INFO级别 -->
	<appender name="info—log" class="ch.qos.logback.core.rolling.RollingFileAppender">

		<file>${Log_Home}/info/info.log</file>

		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 设置过滤级别 -->
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${Log_Home}/info/info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxHistory>7</maxHistory>
			<totalSizeCap>1GB</totalSizeCap>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<Pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} - %msg%n</Pattern>
		</encoder>
	</appender>


	<!--
		logger主要用于存放日志对象，也可以定义日志类型、级别
		name：表示匹配的logger类型前缀，也就是包的前半部分
		level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
		false：表示只用当前logger的appender-ref，true：
		表示当前logger的appender-ref和rootLogger的appender-ref都有效
	-->

	<!-- Spring framework logger -->
	<logger name="org.springframework" level="info" additivity="false"></logger>



	<!--
	root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
	要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
	-->
	<root level="${Log_Level_Root}">
		<appender-ref ref="stdout" />
		<appender-ref ref="debug—log" />
		<appender-ref ref="info—log" />
	</root>

</configuration>